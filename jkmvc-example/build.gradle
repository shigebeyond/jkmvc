dependencies{
    // other project
    if(env == 'dev') {
        compile project(':jkmvc-http')
        compile project(':jkmvc-server-jetty')
    }else{
        compile "net.jkcode.jkmvc:jkmvc-http:${project.version}"
        compile "net.jkcode.jkmvc:jkmvc-server-jetty:${project.version}"
    }

    /*
     * JettyServerLauncher 启动时报错: `java.lang.NoClassDefFoundError: javax/servlet/ServletRequest`
     * 原因: gradle的 war 插件自动将 javax.servlet-api 弄成 providedCompile, 你就算在工程的build.gradle 改为 compile 也没用
     * fix: project structure -> modules -> 选中 JettyServerLauncher 应用的工程 -> depencies -> 选中 Gradle: javax.servlet:javax.servlet-api:3.1.0 包, 将 scop 由 provided 改为 compile
     */
    //compile "javax.servlet:javax.servlet-api:3.1.0"

    // jdbc
    runtime "mysql:mysql-connector-java:5.1.6"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'

// 复制war
task copyWar(type: Copy) {
    // 对于jenkins的任务, project.name = jenkins_java
    //println "----------" + project.name + "----------"
    into "${buildDir}/app"
    // 由于未指定project.name, 则project.name可能按根目录名来, 而jenkins的根目录名为任务名, 不一定是git项目名
    //from "${buildDir}/libs/jkmvc-example-${project.version}.war"
    from("${buildDir}/libs/"){
        include '*.war'
    }
}

// 复制start.sh
task copyStartSh(type: Copy) {
   into "${buildDir}/app"
   from "start-jetty.sh"
   // 复制 servlet-api.jar
   from('/home/shi/.m2/repository/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar')
}

// 复制配置文件
task copyConf(type: Copy) {
   into "${buildDir}/app/conf"
   // 需要的配置文件
   def props = ["dataSources.yaml", "logback.xml", "auth.yaml", "session.properties", "upload.properties", "jetty.yaml"
                /*"db.yaml", "orm.properties", "routes.yaml", "http.yaml", "jetty.yaml" // 工程自己就打包在目录classes */]
   // 项目 resources 目录, 来收集配置文件
   for(src in project.sourceSets.main.resources){
      def match = props.any{ p -> src.name.endsWith(p) }
      if(match){
        //println(src)
        from src
      }
   }
}

if (project.hasProperty("all")){
    build.finalizedBy(copyWar)
    build.dependsOn(copyStartSh)
    build.dependsOn(copyConf)
}

// 启动jetty
gretty{
    // server 配置
    servletContainer 'jetty9' // 'tomcat8'
    httpPort 8080
    managedClassReload true // 热部署
    scanInterval 1 // 热部署的扫描间隔，当值为0时，不扫描新class，不热部署

    // 调试: gradle appRunDebug
    debugPort 5006 // 运行jetty的jvm独立于运行gradle的jvm, 因此也使用独立的调试端口
    debugSuspend true

    // webapp 配置
    contextPath "/${project.name}"
    inplaceMode "hard" // 资源目录 src/main/webapp
}